#include<cstdio>
#include<cstdlib>
#include<cstring>
 
#define ARRAY_SIZE(a) sizeof(a)/sizeof(a[0])
#define ALPHABET_SIZE (26)
#define CHAR_TO_INDEX(c) ((int)c - (int)'a')
 
// trie node
typedef struct trie_node trie_node_t;
struct trie_node {
    int value;
    trie_node_t *children[ALPHABET_SIZE];
};
typedef struct trie trie_t;
struct trie {
    trie_node_t *root;
    int count;
};

trie_node_t *getNode(void) {
    trie_node_t *pNode = NULL;
    pNode = (trie_node_t *)malloc(sizeof(trie_node_t));
    if(pNode) {
        int i;
        pNode->value = 0;
 
        for(i = 0; i < ALPHABET_SIZE; i++) {
            pNode->children[i] = NULL;
        }
    }
    return pNode;
}
 
// Initializes trie (root is dummy node)
void initialize(trie_t *pTrie) {
    pTrie->root = getNode();
    pTrie->count = 0;
}
 
// If not present, inserts key into trie
// If the key is prefix of trie node, just marks leaf node
void insert(trie_t *pTrie, char key[]) {
    int level;
    int length = strlen(key);
    int index;
    trie_node_t *pCrawl;
    pTrie->count++;
    pCrawl = pTrie->root; 
    for(level=0;level<length;level++) {
        index = CHAR_TO_INDEX(key[level]);
        if( !pCrawl->children[index]) {
            pCrawl->children[index] = getNode();
        }
        pCrawl = pCrawl->children[index];
    }
    // mark last node as leaf
    pCrawl->value = pTrie->count;
}
 
// Returns non zero, if key presents in trie
int search(trie_t *pTrie, char key[]) {
    int level;
    int length = strlen(key);
    int index;
    trie_node_t *pCrawl; 
    pCrawl = pTrie->root;
    for( level = 0; level < length; level++ ) {
        index = CHAR_TO_INDEX(key[level]);
        if( !pCrawl->children[index] ) {
            return level+1;
        }
        pCrawl = pCrawl->children[index];
    }
    return length;
}
 
// Driver
int main() {
    // Input keys (use only 'a' through 'z' and lower case)
    char keys[][8] = {"the", "a", "there", "answer", "any", "by", "bye", "their"};
    trie_t trie;
    initialize(&trie);
    // Construct trie
    for(int i = 0; i < ARRAY_SIZE(keys); i++) {
        insert(&trie, keys[i]);
    }
    // Search for different keys
    printf("%s --- %d\n", "the", search(&trie, "the"));
    printf("%s --- %d\n", "these", search(&trie, "these") );
    printf("%s --- %d\n", "their", search(&trie, "their") );
    printf("%s --- %d\n", "thaw", search(&trie, "thaw") );
    return 0;
}
